# Prepare LINUX VMS IN HOME ENV
---
- name: Configure Linux Vms
  hosts: linux_vms
  gather_facts: true
  become: true

  roles:
  - role: systemd-timesyncd
    timesync_timezone: "{{ timezone }}"
    timesync_ntp_hosts:
      - time.google.com

  tasks:

  - name: Add to /etc/environment - needed to fix apt_repository issue
    ansible.builtin.lineinfile:
      path: /etc/environment
      regexp: '^export GNUTLS_CPUID_OVERRIDE'
      line: "export GNUTLS_CPUID_OVERRIDE=0x1"
      mode: '0644'
      owner: root
      group: root
    
  - name: Validate all machine_ids and product_ids are unqiue
    ansible.builtin.script:
      cmd: scripts/check-unique.py {% for host in ansible_play_hosts %}{{ hostvars[host].ansible_facts[item] }} {% endfor %}
      executable: /usr/bin/python3
    run_once: true
    delegate_to: localhost
    changed_when: false
    loop:
      - product_uuid
      - machine_id

  - name: Validate all MACs are unique
    ansible.builtin.script:
      cmd: scripts/check-unique.py {% for host in ansible_play_hosts %}{{ hostvars[host]['ansible_facts']['ens160']['macaddress'] }} {% endfor %}
      executable: /usr/bin/python3
    run_once: true
    delegate_to: localhost
    changed_when: false

  - name: Disable UFW
    ansible.builtin.service:
      name: ufw
      enabled: false
      state: stopped

  - name: Disable swap in fstat (permanent)
    ansible.builtin.replace:
      path: /etc/fstab
      regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
      replace: '# \1'

  - name: Turn off swap
    ansible.builtin.command: swapoff -a
    changed_when: false
  
  - name: sysctl vm.swappiness=0
    ansible.builtin.sysctl:
      name: vm.swappiness
      value: '0'
      sysctl_file: /etc/sysctl.d/10-swappiness.conf
      state: present
  
  - name: Install base set of packages
    ansible.builtin.apt:
      name:
        - nfs-common
        - jq
      state: present
      update_cache: true

  - name: Generate entries in /etc/hosts
    ansible.builtin.template:
      src: templates/linux-hosts.j2
      dest: /etc/hosts
      backup: true
      mode: '644'

  - name: Verify hostname matches inventory host
    ansible.builtin.hostname:
      name: "{{ inventory_hostname }}"

  - name: Verify FQDN
    ansible.builtin.debug:
      msg: "FQDN OK - {{ansible_fqdn}}"
    failed_when: ansible_fqdn != (inventory_hostname + '.' + domain_name)

  - name: Verify IP
    ansible.builtin.debug:
      msg: "DNSIP: {{ lookup('community.dns.lookup', inventory_hostname+'.ramvarra.com.') }} HOSTIP: {{ ansible_default_ipv4.address }}"
    failed_when: lookup('community.dns.lookup', inventory_hostname+'.'+domain_name+'.') != ansible_default_ipv4.address


